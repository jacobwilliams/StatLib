CSTART OF AS 51
      SUBROUTINE LOGLIN(NVAR, DIM, NCON, CONFIG, NTAB, TABLE, FIT,
     $  LOCMAR, NMAR, MARG, NU, U, MAXDEV, MAXIT, DEV, NLAST, IFAULT)
C
C        ALGORITHM AS 51  APPL. STATIST. (1972) VOL.21, P.218
C
C        PERFORMS AN ITERATIVE PROPORTIONAL FIT OF THE MARGINAL
C        TOTALS OF A CONTINGENCY TABLE.
C
C        THIS VERSION PERMITS UP TO SEVEN VARIABLES. IF THIS LIMIT
C        IS TOO SMALL, CHANGE THE VALUE OF MAXVAR, AND OF THE
C        DIMENSION IN THE DECLARATION OF CHECK AND ICON - SEE
C        ALSO THE CHANGES NEEDED IN AS 51.1 AND AS 51.2
C
      REAL MARG(NMAR), U(NU), TABLE(NTAB), FIT(NTAB), MAXDEV,
     $  DEV(MAXIT), ZERO, X, Y, XMAX
      INTEGER DIM(NVAR), CONFIG(NVAR, NCON), LOCMAR(NCON),
     $  POINT, SIZE, ICON(7)
      LOGICAL CHECK(7)
C
      DATA MAXVAR, ZERO /7, 0.0/
C
      IFAULT = 0
      NLAST = 0
C
C        CHECK VALIDITY OF NVAR, THE NUMBER OF VARIABLES,
C        AND OF MAXIT, THE MAXIMUM NUMBER OF ITERATIONS
C
      IF (NVAR .GT. 0 .AND. NVAR .LE. MAXVAR .AND. MAXIT .GT. 0) GOTO 10
    5 IFAULT = 4
      RETURN
C
C        LOOK AT TABLE AND FIT CONSTANTS
C
   10 SIZE = 1
      DO 30 J = 1, NVAR
      IF (DIM(J) .LE. 0) GOTO 5
      SIZE = SIZE * DIM(J)
   30 CONTINUE
      IF (SIZE .LE. NTAB) GOTO 40
   35 IFAULT = 2
      RETURN
   40 X = ZERO
      Y = ZERO
      DO 60 I = 1, SIZE
      IF (TABLE(I) .LT. ZERO .OR. FIT(I) .LT. ZERO) GOTO 5
      X = X + TABLE(I)
      Y = Y + FIT(I)
   60 CONTINUE
C
C        MAKE A PRELIMINARY ADJUSTMENT TO OBTAIN THE FIT
C        TO AN EMPTY CONFIGURATION LIST
C
      IF (Y .EQ. ZERO) GOTO 5
      X = X / Y
      DO 80 I = 1, SIZE
   80 FIT(I) = X * FIT(I)
      IF (NCON .LE. 0 .OR. CONFIG(1, 1) .EQ. 0) RETURN
C
C        ALLOCATE MARGINAL TABLES
C
      POINT = 1
      DO 150 I = 1, NCON
C
C        A ZERO BEGINNING A CONFIGURATION INDICATES
C        THAT THE LIST IS COMPLETED
C
      IF (CONFIG(1, I) .EQ. 0) GOTO 160
C
C        GET MARGINAL TABLE SIZE. WHILE DOING THIS
C        TASK, SEE IF THE CONFIGURATION LIST CONTAINS
C        DUPLICATIONS OR ELEMENTS OUT OF RANGE.
C
      SIZE = 1
      DO 90 J = 1, NVAR
   90 CHECK(J) = .FALSE.
      DO 120 J = 1, NVAR
      K = CONFIG(J, I)
C
C        A ZERO INDICATES THE END OF THE STRING
C
      IF (K .EQ. 0) GOTO 130
C
C        SEE IF ELEMENT VALID
C
      IF (K .GE. 0 .AND. K .LE. NVAR) GOTO 100
   95 IFAULT = 1
      RETURN
C
C        CHECK FOR DUPLICATION
C
  100 IF (CHECK(K)) GOTO 95
      CHECK(K) = .TRUE.
C
C        GET SIZE
C
      SIZE = SIZE * DIM(K)
  120 CONTINUE
C
C        SINCE U IS USED TO STORE FITTED MARGINALS,
C        SIZE MUST NOT EXCEED NU
C
  130 IF (SIZE .GT. NU) GOTO 35
C
C        LOCMAR POINTS TO MARGINAL TABLES TO BE PLACED IN MARG
C
      LOCMAR(I) = POINT
      POINT = POINT + SIZE
  150 CONTINUE
C
C        GET N, NUMBER OF VALID CONFIGURATIONS
C
      I = NCON + 1
  160 N = I - 1
C
C        SEE IF MARG CAN HOLD ALL MARGINAL TABLES
C
      IF (POINT .GT. NMAR + 1) GOTO 35
C
C        OBTAIN MARGINAL TABLES
C
      DO 190 I = 1, N
      DO 180 J = 1, NVAR
  180 ICON(J) = CONFIG(J, I)
      CALL COLLAP(NVAR, TABLE, MARG, LOCMAR(I), NTAB, NMAR, DIM, ICON)
  190 CONTINUE
C
C        PERFORM ITERATIONS
C
      DO 220 K = 1, MAXIT
C
C        XMAX IS MAXIMUM DEVIATION OBSERVED BETWEEN
C        FITTED AND TRUE MARGINAL DURING A CYCLE
C
      XMAX = ZERO
      DO 210 I = 1, N
      DO 200 J = 1, NVAR
  200 ICON(J) = CONFIG(J, I)
      CALL COLLAP(NVAR, FIT, U, 1, NTAB, NU, DIM, ICON)
      CALL ADJUST(NVAR, FIT, U, MARG, LOCMAR(I), NTAB, NU, NMAR,
     $  DIM, ICON, XMAX)
  210 CONTINUE
C
C        TEST CONVERGENCE
C
      DEV(K) = XMAX
      IF (XMAX .LT. MAXDEV) GOTO 240
  220 CONTINUE
      IF (MAXIT .GT. 1) GOTO 230
      NLAST = 1
      RETURN
C
C        NO CONVERGENCE
C
  230 IFAULT = 3
      NLAST = MAXIT
      RETURN
C
C        NORMAL TERMINATION
C
  240 NLAST = K
      RETURN
      END
C
      SUBROUTINE COLLAP(NVAR, X, Y, LOCY, NX, NY, DIM, CONFIG)
C
C        ALGORITHM AS 51.1  APPL. STATIST. (1972) VOL.21, P.218
C
C        COMPUTES A MARGINAL TABLE FROM A COMPLETE TABLE.
C        ALL PARAMETERS ARE ASSUMED VALID WITHOUT TEST.
C
C        IF THE VALUE OF NVAR IS TO BE GREATER THAN 7, THE
C        DIMENSIONS IN THE DECLARATIONS OF SIZE AND COORD MUST
C        BE INCREASED TO NVAR+1 AND NVAR RESPECTIVELY.
C
      INTEGER SIZE(8), DIM(NVAR), CONFIG(NVAR), COORD(7)
C
C        THE LARGER TABLE IS X AND THE SMALLER ONE IS Y
C
      REAL X(NX), Y(NY), ZERO
      DATA ZERO /0.0/
C
C        INITIALISE ARRAYS
C
      SIZE(1) = 1
      DO 10 K = 1, NVAR
      L = CONFIG(K)
      IF (L .EQ. 0) GOTO 20
      SIZE(K + 1) = SIZE(K) * DIM(L)
   10 CONTINUE
C
C        FIND NUMBER OF VARIABLES IN CONFIGURATION
C
      K = NVAR + 1
   20 N = K - 1
C
C        INITIALISE Y. FIRST CELL OF MARGINAL TABLE IS
C        AT Y(LOCY) AND TABLE HAS SIZE(K) ELEMENTS
C
      LOCU = LOCY + SIZE(K) - 1
      DO 30 J = LOCY, LOCU
   30 Y(J) = ZERO
C
C        INITIALISE COORDINATES
C
      DO 50 K = 1, NVAR
   50 COORD(K) = 0
C
C        FIND LOCATIONS IN TABLES
C
      I = 1
   60 J = LOCY
      DO 70 K = 1, N
      L = CONFIG(K)
      J = J + COORD(L) * SIZE(K)
   70 CONTINUE
      Y(J) = Y(J) + X(I)
C
C        UPDATE COORDINATES
C
      I = I + 1
      DO 80 K = 1, NVAR
      COORD(K) = COORD(K) + 1
      IF (COORD(K) .LT. DIM(K)) GOTO 60
      COORD(K) = 0
   80 CONTINUE
      RETURN
      END
C
      SUBROUTINE ADJUST(NVAR, X, Y, Z, LOCZ, NX, NY, NZ, DIM, CONFIG, D)
C
C        ALGORITHM AS 51.2  APPL. STATIST. (1972) VOL.21, P.218
C
C        MAKES PROPORTIONAL ADJUSTMENT CORRESPONDING TO CONFIG.
C        ALL PARAMETERS ARE ASSUMED VALID WITHOUT TEST.
C
C        IF THE VALUE OF NVAR IS TO BE GREATER THAN 7, THE
C        DIMENSIONS IN THE DECLARATIONS OF SIZE AND COORD MUST
C        BE INCREASED TO NVAR+1 AND NVAR RESPECTIVELY.
C
      INTEGER SIZE(8), DIM(NVAR), CONFIG(NVAR), COORD(7)
      REAL X(NX), Y(NY), Z(NZ), D, E, ZERO, ZABS
C
      DATA ZERO /0.0/
C
      ZABS(E) = ABS(E)
C
C        SET SIZE ARRAY
C
      SIZE(1) = 1
      DO 10 K = 1, NVAR
      L = CONFIG(K)
      IF (L .EQ. 0) GOTO 20
      SIZE(K + 1) = SIZE(K) * DIM(L)
   10 CONTINUE
C
C        FIND NUMBER OF VARIABLES IN CONFIGURATION
C
      K = NVAR + 1
   20 N = K - 1
C
C        TEST SIZE OF DEVIATION
C
      L = SIZE(K)
      J = 1
      K = LOCZ
      DO 30 I = 1, L
      E = ZABS(Z(K) - Y(J))
      IF (E .GT. D) D = E
      J = J + 1
      K = K + 1
   30 CONTINUE
C
C        INITIALIZE COORDINATES
C
      DO 40 K = 1, NVAR
   40 COORD(K) = 0
      I = 1
C
C        PERFORM ADJUSTMENT
C
   50 J = 0
      DO 60 K = 1, N
      L = CONFIG(K)
      J = J + COORD(L) * SIZE(K)
   60 CONTINUE
      K = J + LOCZ
      J = J + 1
C
C        NOTE THAT Y(J) SHOULD BE NON-NEGATIVE
C
      IF (Y(J) .LE. ZERO) X(I) = ZERO
      IF (Y(J) .GT. ZERO) X(I) = X(I) * Z(K) / Y(J)
C
C        UPDATE COORDINATES
C
      I = I + 1
      DO 70 K = 1, NVAR
      COORD(K) = COORD(K) + 1
      IF (COORD(K) .LT. DIM(K)) GOTO 50
      COORD(K) = 0
   70 CONTINUE
      RETURN
      END
CEND OF AS 51
