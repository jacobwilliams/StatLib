C UKC NETLIB DISTRIBUTION COPYRIGHT 1990 RSS
C
      SUBROUTINE RBO(N, A, M, IFAULT)
      COMPLEX A(N), T
C
C<<<<<  Acquired in machine-readable form from 'Applied Statistics'
C<<<<<  algorithms editor, January 1983.
C
C
C        ALGORITHM AS 186  APPL. STATIST. (1982) VOL.31, NO.3
C
C        SUBROUTINE RBO (WITH AN AUXILIARY SUBROUTINE FFT)
C        PERFORMS THE N-POINT DISCRETE FAST FOURIER TRANSFORM OF
C        THE SAMPLED FUNCTION STORED IN A(N), WHERE N=2**M,
C        M AN INTEGER
C
C        CHECK IF VALUES OF N AND M ARE PROPERLY CHOSEN
C
      IFAULT = 1
      IF (N .LE. 0 .OR. 2 ** M .NE. N) RETURN
      IFAULT = 0
C
C        PART 1: PROCEDURE OF REVERSE BINARY ORDER PERMUTATION.
C        CONTENTS OF CELLS ARE INTERCHANGED WHEN J.GT.I
C
      NW = N / 2
      NV = N + 1
      IMAX = NW - 1
      J = 1
      DO 6 I = 1, IMAX, 2
C
C        IN THIS LOOP THE MINIMAL SET Z10 OF PAIRS OF ADDRESSES (I,J)
C        IS GENERATED. THE Z10 GENERATION INSTEAD OF ALL POSSIBLE
C        PAIRS (I,J) GENERATION REDUCES TOTAL TIME OF RBO PERMUTATION.
C
        IF (J - I) 1, 3, 2
C
C        THE PAIR OF ADDRESSES (I,J) AVAILABLE AT THIS POINT IS USED
C        (DUE TO SYMMETRY PRINCIPLE (1)) FOR (IP,JP) ADDRESS
C        GENERATION (IP.GT.N/2)
C
    1   IP = NV - I
        JP = NV - J
C
C        CONTENTS OF IP AND JP CELLS ARE INTERCHANGED
C
        T = A(JP)
        A(JP) = A(IP)
        A(IP) = T
C
C        THE NEXT PAIR OF ADDRESSES IS GENERATED USING EVEN ELEMENT
C        PROPERTY AND APPROPRIATE PERMUTATION IS PERFORMED.
C
        GOTO 3
    2   T = A(J)
        A(J) = A(I)
        A(I) = T
    3   IP = I + 1
        JP = J + NW
        T = A(JP)
        A(JP) = A(IP)
        A(IP) = T
C
C        THE NEXT PAIR OF ADDRESSES (I,J) IS GENERATED. THIS PART OF
C        THE PROCEDURE DOES NOT DIFFER FROM THE APPROPRIATE PART OF
C        THE RADER ALGORITHM IN RABINER AND GOLD (1975).
C
        K = NV
    4   IF (K .GE. J) GOTO 5
        J = J - K
        K = K / 2
        GOTO 4
    5   J = J + K
    6 CONTINUE
C
C        PART 2: NOW THE FFT SUBROUTINE IS CALLED. ONE CAN USE ANY OF
C        THE KNOWN PROCEDURES TO PERFORM THE COOLEY-TUKEY ALGORITHM.
C
      CALL FFT(M, N, A)
      RETURN
      END
C
      SUBROUTINE FFT(M, N, A)
C
C        ALGORITHM AS 186.1  APPL. STATIST. (1982) VOL.31, NO.3
C
C        SUBROUTINE FFT USES (WITH A SLIGHT MODIFICATION) PART OF FFT
C        ALGORITHM PUBLISHED IN RABINER AND GOLD (1975).
C
      COMPLEX A(N), U, W, T
      PI = 3.141592653589793
      LE = 1
      DO 20 L = 1, M
        LE1 = LE
        LE = LE + LE
        U = (1.0, 1.0)
        W = CMPLX(COS(PI / FLOAT(LE1)), -SIN(PI / FLOAT(LE1)))
        DO 20 J = 1, LE1
          DO 10 I = J, N, LE
            IP = I + LE1
            T = A(IP) * U
            A(IP) = A(I) - T
	    A(I) = A(I) + T
   10     CONTINUE
          U = U * W
   20 CONTINUE
      RETURN
      END
