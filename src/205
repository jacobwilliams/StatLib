      SUBROUTINE ENUM(R,C,N,M,IFAULT)
C
C
C	ALGORITHM AS 205 APPL. STATIST. (1984) VOL 33, NO. 3.
C       ENUMERATES ALL R*C CONTINGENCY TABLES WITH GIVEN ROW TOTALS N(I)
C       AND COLUMN TOTALS M(J) AND CALCULATES THE HYPERGEOMETRIC
C       PROBABILITY OF EACH TABLE.
C
C       FOR TABLES HAVING TWO OR MORE ROW SUMS REPEATED, EQUIVALENT
C       TABLES DIFFERING ONLY BY A ROW PERMUTATION ARE NOT SEPARATELY
C       ENUMERATED. A REPRESENTATIVE OF EACH EQUIVALENCE CLASS IS ENUMERATED
C       AND THE MULTIPLICITY OF EACH CLASS CALCULATED.
C
C       FOR EACH TABLE ENUMERATED, SUBROUTINE EVAL IS CALLED TO CARRY OUT
C       CALCULATIONS ON THE TABLE.
C
      INTEGER R,C,N(10),M(10),IFAULT
      INTEGER TABLE(10,10),BOUND(10,10),Z(10)
      INTEGER REPS(10),MULT(10),REPSR,REPSC,MULTR,MULTC,ONE
      INTEGER NTOTAL,NTOT,MAX,NMAX,RM,CM,LEFT,ROWBND,ROWSUM
      INTEGER I,J,II,JJ,IIP,IIM,JP,KEEP
      REAL PROB(10,10),FLOGM(201),FACTLM(201),ZERO
      REAL PROB0
      LOGICAL REPT(10),REPTC(10),IEQIM
C
C       LOCAL VARIABLES -
C         TABLE(I,J)   - (I,J)-TH ENTRY OF CURRENT TABLE
C         NTOTAL       - TOTAL OF TABLE ENTRIES
C         BOUND(I,J)   - CURRENT UPPER BOUND ON TABLE(I,J) TO SATISFY
C                        ROW AND COLUMN TOTALS
C         REPT(I)      - LOGICAL = TRUE IF ROW TOTALS N(I), N(I-1) ARE EQUAL
C                                = FALSE OTHERWISE
C         REPS(I)      - NUMBER OF PREVIOUS ROWS EQUAL TO ROW I
C         MULT(I)      - MAXIMUM NUMBER OF EQUIVALENT TABLES
C                        GIVEN FIRST I ROWS
C         Z(J)         - LOWER BOUND ON SUM OF ENTRIES USED BY ALGORITHM C
C         PROB(I,J)    - PARTIAL SUM OF TERMS IN LOG(P)
C
C
      DATA MAX/10/ , NMAX/201/ , ZERO/0.0E0/ , ONE/1/
C
C         MAX  - MAXIMUM DIMENSION OF TABLE
C         NMAX - MAXIMUM NUMBER OF OBSERVATIONS + 1
C
C
C       CHECK INPUT VALUES
C
      IFAULT=1
      IF(R.GT.MAX .OR. C.GT.MAX .OR. R.LE.0 .OR. C.LE.0) RETURN
C
      IFAULT=3
      NTOTAL=0
      DO 10 I=1,R
	IF(N(I) .LE. 0) RETURN
        NTOTAL=NTOTAL+N(I)
10    CONTINUE
      NTOT=0
      DO 20 J=1,C
	IF (M(J) .LE. 0) RETURN
        NTOT=NTOT+M(J)
20    CONTINUE
	IFAULT=2
      IF (NTOT.NE.NTOTAL) RETURN
C
      IFAULT=4
      IF (NTOTAL.GE.NMAX) RETURN
C
      IFAULT=0
C
C       INITIALISE FLOGM(K)=LOG(K-1), FACTLM(K)=LOG(K-1 FACTORIAL)
C
      FLOGM(1)=ZERO
      FACTLM(1)=ZERO
      DO 50 K=1,NTOTAL
        FLOGM(K+1)=ALOG(FLOAT(K))
        FACTLM(K+1)=FACTLM(K)+FLOGM(K+1)
50    CONTINUE
C
C       CONSTANTS
C
      RM=R-1
      CM=C-1
C
C       SORT ROWS AND COLUMNS INTO ASCENDING ORDER
C
      DO 60 I=1,RM
        IP=I+1
        DO 60 II=IP,R
          IF (N(I).LE.N(II)) GOTO 60
          KEEP=N(I)
          N(I)=N(II)
          N(II)=KEEP
60    CONTINUE
C
      DO 70 J=1,CM
        JP=J+1
        DO 70 JJ=JP,C
          IF(M(J).LE.M(JJ))GOTO 70
          KEEP=M(J)
          M(J)=M(JJ)
          M(JJ)=KEEP
70    CONTINUE
C
C       CALCULATE MULTIPLICITIES OF ROWS AND COLUMNS
C
C       REPTC(J) = .TRUE. IF COLUMNS J AND J-1 HAVE THE SAME TOTAL
C       REPT(I)  = .TRUE. IF ROWS I AND I-1 HAVE THE SAME TOTAL
C
      MULTC=ONE
      REPSC=ONE
      REPTC(1)=.FALSE.
      DO 80 J=2,C
        REPTC(J) = (M(J).EQ.M(J-1))
        IF(REPTC(J)) GOTO 79
        REPSC=ONE
        GOTO 80
79      REPSC=REPSC+ONE
        MULTC=MULTC*REPSC
80    CONTINUE
C
      MULTR=ONE
      REPSR=ONE
      REPT(1)=.FALSE.
      DO 85 I=2,R
        REPT(I)=(N(I).EQ.N(I-1))
        IF(REPT(I))GOTO 84
        REPSR=ONE
        GOTO 85
84      REPSR=REPSR+ONE
        MULTR=MULTR*REPSR
85    CONTINUE
C
C       IF COLUMN MULTIPLICITY EXCEEDS ROW MULTIPLICITY TRANSPOSE TABLE
C
      IF (MULTR.GE.MULTC) GOTO 100
      MAXRC=MAX0(R,C)
      DO 90 IJ=1,MAXRC
        KEEP=N(IJ)
        N(IJ)=M(IJ)
        M(IJ)=KEEP
90    CONTINUE
      KEEP=R
      R=C
      C=KEEP
	RM=R-1
	CM=C-1
      DO 95 I=1,R
95        REPT(I)=REPTC(I)
      MULTR=MULTC
C
C       SET UP INITIAL TABLE
C
C       MAXIMUM MULTIPLICITY
C
100   MULT(1)=MULTR
      REPS(1)=ONE
C
C       CONSTANT TERM IN PROBABILITY
C
      PROB0=-FACTLM(NTOTAL+1)
      DO 105 I=1,R
	II=N(I)
	PROB0=PROB0+FACTLM(II+1)
105   CONTINUE
      DO 106 J=1,C
	JJ=M(J)
        PROB0=PROB0+FACTLM(JJ+1)
106   CONTINUE
C
C       CALCULATE BOUNDS  ON ROW 1
C
      DO 110 J=1,C
110        BOUND(1,J) = M(J)
C
C       FOR EACH I FIND GREATEST I-TH ROW SATISFYING BOUNDS
C
      DO 150 I=1,R
        IF (I.NE.1) PROB0=PROB(I-1,C)
        LEFT=N(I)
C
C         ELEMENTS OF ROW I
C
        IEQIM = REPT(I)
        DO 120 J=1,CM
	IJ=MIN0(LEFT,BOUND(I,J))
          TABLE(I,J) = IJ
          IF (J.EQ.1) PROB(I,J) = PROB0 - FACTLM(IJ+1)
          IF (J.NE.1) PROB(I,J) = PROB(I,J-1) - FACTLM(IJ+1)
          LEFT=LEFT - TABLE(I,J)
          IF (I.LT.R) BOUND(I+1,J) = BOUND(I,J) - TABLE(I,J)
          IF (LEFT.EQ.0) GOTO 121
          IF (IEQIM) IEQIM=TABLE(I,J).EQ.TABLE(I-1,J)
120     CONTINUE
        TABLE(I,C)=LEFT
        PROB(I,C)=PROB(I,CM)-FACTLM(LEFT+1)
        IF (I.LT.R) BOUND(I+1,C)=BOUND(I,C)-LEFT
        GOTO 123
121     JP=J+1
        DO 122 JJ=JP,C
          TABLE(I,JJ)=0
          PROB(I,JJ)=PROB(I,JJ-1)
          BOUND(I+1,JJ)=BOUND(I,JJ)
122     CONTINUE
123     IF(I.EQ.1) GOTO 150
        MULT(I)=MULT(I-1)
        REPS(I)=ONE
        IF (.NOT.IEQIM) GOTO 150
        REPS(I)=REPS(I-1)+ONE
        MULT(I)=MULT(I)/REPS(I)
C
150   CONTINUE
C
C
C       CALL EVAL FOR TABLE 1
C
      CALL EVAL(TABLE,R,C,N,M,PROB(R,C),MULT(R))
C
C       COMMENCE ENUMERATION OF REMAINING TABLES
C       START OF MAIN LOOP
C
200   I=R
210   I=I-1
C
C       IF I = 0 NO MORE TABLES ARE POSSIBLE
C
      IF (I.EQ.0) RETURN
C
      J=CM
      LEFT=TABLE(I,C)
      ROWBND=BOUND(I,C)
C
C       TRY TO DECREASE ELEMENT (I,J)
C
220   IF (TABLE(I,J).GT.0 .AND. LEFT.LT.ROWBND) GOTO 230
C
C       ELEMENT (I,J) CANNOT BE DECREASED - TRY (I,J-1)
C
      IF(J.EQ.1) GOTO 210
      LEFT=LEFT+TABLE(I,J)
      ROWBND=ROWBND+BOUND(I,J)
      J=J-1
      GOTO 220
C
C       DECREASE ELEMENT (I,J)
C
230	IJ=TABLE(I,J)
      PROB(I,J)=PROB(I,J)+FLOGM(IJ+1)
      TABLE(I,J)=TABLE(I,J)-1
      BOUND(I+1,J)=BOUND(I+1,J)+1
C
C       IF ROW I WAS THE SAME AS ROW I-1 IT IS NO LONGER
C
      IF (REPS(I).EQ.ONE) GOTO 270
      REPS(I)=ONE
      MULT(I)=MULT(I-1)
C
C       COMPLETE ROW I WITH THE LARGEST POSSIBLE VALUES
C
270   II=I
      IIP=II+1
      IIM=II-1
      JNEXT=J+1
      LEFT=LEFT+1
      GOTO 380
C
C       FILL UP REMAINING ROWS
C
300   II=II+1
C
C       THE LAST ROW IS TREATED SEPARATELY
C
      IF (II.EQ.R) GOTO 400
      IIP=II+1
      IIM=II-1
      IF (REPT(II)) GOTO 310
C
C       ROW TOTAL N(II) IS NOT A REPEAT - MAKE ROW II AS LARGE AS POSSIBLE
C
      LEFT=N(II)
      JNEXT=1
      GOTO 380
C
C       REPEATED ROW TOTALS
C
C       (I) IF ROW II-1 SATISFIES THE BOUNDS ON ROW II REPEAT IT
C
310   DO 320 J=1,C
      IF (TABLE(IIM,J).GT.BOUND(II,J)) GOTO 330
	IJ=TABLE(IIM,J)
      TABLE(II,J)=IJ
      BOUND(IIP,J)=BOUND(II,J)-TABLE(II,J)
      IF (J.EQ.1) PROB(II,J) = PROB(IIM,C) - FACTLM(IJ+1)
      IF (J.NE.1) PROB(II,J) = PROB(II,J-1) - FACTLM(IJ+1)
320   CONTINUE
C
C       ROW II IS A REPEAT OF ROW II-1
C
      REPS(II)=REPS(IIM)+ONE
      MULT(II)=MULT(IIM)/REPS(II)
      GOTO 300
C
C       ELEMENT J OF ROW II-1 WAS TOO BIG
C
C       CONSTRUCT THE SEQUENCE Z(J) OF LOWER BOUNDS
C
330   IF (J.GT.1) GOTO 331
C
C       IF J=1 THE BOUNDS ARE SATISFIED AUTOMATICALLY
C
	IJ=BOUND(II,1)
      TABLE(II,1)=IJ
      PROB(II,1)=PROB(IIM,C)-FACTLM(IJ+1)
      JNEXT=2
      LEFT=N(II)-TABLE(II,1)
      BOUND(IIP,1)=0
      GOTO 380
331   Z(J)=N(II)
      JM=J-1
      IF (J.EQ.C) GOTO 336
      JP=J+1
      DO 335 JJ=JP,C
335   Z(J)=Z(J)-BOUND(II,JJ)
336   DO 340 JJM=1,JM
        JJ=J-JJM
        Z(JJ)=Z(JJ+1)-BOUND(II,JJ+1)
340   CONTINUE
C
C       (II) IF THE CUMULATIVE TOTALS OF ROW II-1 ALL EXCEED THE BOUNDS Z(J)
C                      MAKE ELEMENT (II,J) EQUAL TO ITS BOUND
C
      ROWSUM=0
      JKEEP=0
      DO 350 JJ=1,JM
        ROWSUM=ROWSUM+TABLE(IIM,JJ)
        IF ( ROWSUM.LT.Z(JJ) ) GOTO 360
        IF ( ROWSUM.GT.Z(JJ) .AND. TABLE(IIM,JJ).GT.0 ) JKEEP=JJ
350   CONTINUE
      TABLE(II,J)=BOUND(II,J)
      BOUND(IIP,J)=0
	IJ=TABLE(II,J)
      PROB(II,J) = PROB(II,JM) - FACTLM(IJ+1)
      REPS(II)=ONE
      MULT(II)=MULT(IIM)
C
C       COMPLETE ROW II WITH THE LARGEST POSSIBLE ELEMENTS
C
      JNEXT=JP
      LEFT=N(II)
      DO 355 JJ=1,J
355   LEFT=LEFT-TABLE(II,JJ)
      GOTO 380
C
C       (III) THE CUMULATIVE SUMS VIOLATE THE BOUNDS
C       IF NO ELEMENT OF ROW II-1 CAN BE CHANGED TO SATISFY THE BOUNDS
C                 NO SUITABLE ROW II IS POSSIBLE
C       IN THAT CASE GO BACK AND TRY DECREASING ROW II-1
C
360   IF (JKEEP.NE.0) GOTO 370
      I=II
      GOTO 210
C
C       ELEMENT (II,JKEEP) CAN BE DECREASED
C
370   BOUND(IIP,JKEEP)=BOUND(IIP,JKEEP) + 1
	IJ=TABLE(II,JKEEP)
      PROB(II,JKEEP)=PROB(II,JKEEP)+FLOGM(IJ+1)
      TABLE(II,JKEEP)=TABLE(II,JKEEP) - 1
C
C       COMPLETE THE ROW
C
      JNEXT=JKEEP+1
      LEFT=N(II)
      DO 375 JJ=1,JKEEP
375   LEFT=LEFT-TABLE(II,JJ)
C
C       ROW II IS COMPLETE UP TO ELEMENT JNEXT-1
C       MAKE THE REMAINING ELEMENTS AS LARGE AS POSSIBLE
C       (THIS SECTION OF CODE IS USED FOR EVERY ROW, REPEATED OR NOT)
C
380   IF (JNEXT.EQ.C) GOTO 390
C
      DO 385 J=JNEXT,CM
        TABLE(II,J)=MIN0(LEFT,BOUND(II,J))
        LEFT=LEFT-TABLE(II,J)
        BOUND(IIP,J)=BOUND(II,J)-TABLE(II,J)
	IJ=TABLE(II,J)
        IF (J.EQ.1) PROB(II,J) = PROB(IIM,C) - FACTLM(IJ+1)
        IF (J.NE.1) PROB(II,J)=PROB(II,J-1)-FACTLM(IJ+1)
        IF (LEFT.EQ.0) GOTO 391
385   CONTINUE
390   TABLE(II,C)=LEFT
      PROB(II,C)=PROB(II,CM)-FACTLM(LEFT+1)
      BOUND(IIP,C)=BOUND(II,C)-LEFT
      GOTO 393
391   JP=J+1
      DO 392 JJ=JP,C
        TABLE(II,JJ)=0
        PROB(II,JJ) = PROB(II,JJ-1)
        BOUND(IIP,JJ)=BOUND(II,JJ)
392   CONTINUE
393   REPS(II)=ONE
      IF (II.GT.1) MULT(II)=MULT(IIM)
      GOTO 300
C
C       THE FINAL ROW
C
400   IF (REPT(R)) GOTO 420
C
C       NOT A REPEAT - SET ROW R EQUAL TO ITS BOUNDS
C
	IJ=BOUND(R,1)
      TABLE(R,1) = IJ
      PROB(R,1) = PROB(RM,C) - FACTLM(IJ+1)
      DO 410 J=2,C
	IJ=BOUND(R,J)
        TABLE(R,J)=IJ
        PROB(R,J) = PROB(R,J-1) - FACTLM(IJ+1)
410   CONTINUE
      MULT(R)=MULT(RM)
      GOTO 500
C
C       ROW TOTAL R IS A REPEAT - ENSURE THAT IT IS LESS THAN ROW R-1
C
420   DO 430 J=1,C
      IF (BOUND(R,J).GT.TABLE(RM,J)) GOTO 440
	IJ=BOUND(R,J)
      TABLE(R,J)=IJ
      IF (J.EQ.1) PROB(R,J) = PROB(RM,C) - FACTLM(IJ+1)
      IF (J.NE.1) PROB(R,J) = PROB(R,J-1) - FACTLM(IJ+1)
      IF (TABLE(R,J).NE.TABLE(RM,J)) GOTO 450
430   CONTINUE
C
C       ROW R IS A REPEAT OF ROW R-1
C
      REPS(R)=REPS(RM)+ONE
      MULT(R)=MULT(RM)/REPS(R)
      GOTO 500
C
C       IF ROW R WOULD BE BIGGER THAN ROW R-1 GO BACK AND TRY
C          DECREASING ROW R-2
C
440   I=RM
      GOTO 210
C
C       ROW R IS ALREADY LESS THEN ROW R-1 SO NO MORE CHECKS ARE NEEDED
C
450   JP=J+1
      DO 460 JJ=JP,C
	IJ=BOUND(R,JJ)
        TABLE(R,JJ)=IJ
        PROB(R,JJ) = PROB(R,JJ-1) - FACTLM(IJ+1)
460   CONTINUE
      MULT(R)=MULT(RM)
C
C       THE TABLE IS COMPLETE - CALL SUBROUTINE EVAL
C
500      CALL EVAL(TABLE,R,C,N,M,PROB(R,C),MULT(R))
C
C
C       END OF MAIN LOOP
C
      GOTO 200
C
C
      END
C
      SUBROUTINE EVAL(TABLE,R,C,N,M,PROB,MULT)
      INTEGER TABLE(10,10),R,C,N(10),M(10),MULT
C
      RETURN
      END
