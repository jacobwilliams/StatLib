      SUBROUTINE CNV2X2(IK, MXS, MXZ, MXD, LGE, ITAB, HYP, DS, II, K1,
     *                  K2, IERR)
C
C        ALGORITHM AS 289.1 APPL.STATIST. (1994), VOL.43, NO.1
C
C        Convolves hypergeometric distributions generated by
C        several 2x2 tables
C
      INTEGER IK, MXS, MXZ, MXD, ITAB(IK,4), II, K1, K2, IERR
      REAL LGE, HYP(0:MXZ), DS(0:1,0:MXD)
C
      INTEGER I, IAM, IH1, IH2, ILS, IL1, IL2, IMM, INN, IR, ITT, IXX,
     *        J, JJ, JR, KK
      REAL AM, DD1, DD2, DSMX, EL, HYMAX, ONE, SUMLG, X, ZERO, ZEXP,
     *     ZLOG
C
      DATA ONE, ZERO / 1.0E + 00, 0.0E + 00 /
C
      EXTERNAL SUMLG
C
      ZEXP(X) = EXP(X)
      ZLOG(X) = LOG(X)
C
      IERR = 0
C
C        Check input parameters
C
      IF (IK .GT. MXS) IERR = 1
      K1 = 0
      DO 10 I = 1, IK
         IMM = ITAB(I, 1) + ITAB(I, 2)
         INN = ITAB(I, 3) + ITAB(I, 4)
         ITT = ITAB(I, 1) + ITAB(I, 3)
C
C        Lower and upper limits for stratum distribution
C
         IF (ITT .GT. INN) THEN
            IL1 = ITT - INN
         ELSE
            IL1 = 0
         ENDIF
         IF (ITT .LT. IMM) THEN
            IL2 = ITT
         ELSE
            IL2 = IMM
         ENDIF
         ITT = IL2 - IL1
         IF (ITT .GT. MXZ) IERR = 2
         K1 = K1 + IL1
   10 CONTINUE
      IF (IERR .GT. 0) RETURN
C
      DD1 = 10 * ONE
      EL  = LGE * ZLOG(DD1)
C
C        Initialize and set log-scale indicator
C
      II = 0
      JJ = 1
      IR = 0
      DS(0, 0) = ONE / ZEXP(EL)
      DSMX = ZERO - EL
      ILS = 0
C
C        For strata = 1, ..., IK, compute hypergeometric distribution
C        and perform convolution in a recursive fashion
C
      DO 130 I = 1, IK
         IMM = ITAB(I, 1) + ITAB(I, 2)
         INN = ITAB(I, 3) + ITAB(I, 4)
         ITT = ITAB(I, 1) + ITAB(I, 3)
C
C        Lower and upper limits for convolution
C
         IF (ITT .GT. INN) THEN
            IL1 = ITT - INN
         ELSE
            IL1 = 0
         ENDIF
         IF (ITT .LT. IMM) THEN
            IL2 = ITT
         ELSE
            IL2 = IMM
         ENDIF
         IL2 = IL2 - IL1
         K2 = IR + IL2
         IF (K2 .GT. MXD) THEN
            IERR = 3
            RETURN
         ENDIF
C
C        Compute stratum distribution on log-scale
C
         HYP(0) = ZERO
         DO 20 J = 1, IL2
            DD1 = (FLOAT(IMM-J-IL1+1)) * (FLOAT(ITT-J-IL1+1))
            DD2 = (FLOAT(J+IL1)) * (FLOAT(INN-ITT+J+IL1))
            HYP(J) = HYP(J - 1) + ZLOG(DD1 / DD2)
   20    CONTINUE
         IF (ILS .EQ. 1) GOTO 90
C
C        Get maximum hypergeometric coefficient on log-scale and
C        check for potential overflow in stratum distribution
C
         AM = (1.0 + FLOAT(ITT)) / (1.0 + FLOAT(INN + 1)/FLOAT(IMM + 1))
         IAM = IFIX(AM) - IL1
         IF (HYP(0) .GT. HYP(IL2)) THEN
            DO 30 J = 0, IL2
               HYP(J) = HYP(J) - HYP(IL2)
   30       CONTINUE
         ENDIF
         HYMAX = HYP(IAM)
         IF (HYMAX .GT. EL) THEN
            ILS = 1
            GOTO 70
         ENDIF
C
C        Check for potential overflow in the ith convolution
C
         IF (IL2 .LT. IR) THEN
            IXX = IL2 + 1
         ELSE
            IXX = IR + 1
         ENDIF
         DD1 = IXX
         DD1 = ZLOG(DD1)
         DSMX = DSMX + HYMAX + DD1
         IF (DSMX .GE. (EL - ONE)) THEN
            ILS = 1
            GOTO 70
         ENDIF
C
C        Convert stratum distribution to natural scale
C
         DO 40 J = 0, IL2
            HYP(J) = ZEXP(HYP(J))
   40    CONTINUE
C
C        Perform convolution on natural scale
C
         DSMX = ZERO - EL
         DO 60 J = 0, K2
            IF (J .GT. IL2) THEN
               IH1 = J - IL2
            ELSE
               IH1 = 0
            ENDIF
            IF (J .LT. IR) THEN
               IH2 = J
            ELSE
               IH2 = IR
            ENDIF
            DS(JJ, J) = DS(II, IH1) * HYP(J - IH1)
            DO 50 JR = IH1 + 1, IH2
               DD1 = DS(II, JR) * HYP(J - JR)
               DS(JJ, J) = DS(JJ, J) + DD1
   50       CONTINUE
            DD1 = ZLOG(DS(JJ, J))
            IF (DD1 .GT. DSMX) DSMX = DD1
   60    CONTINUE
         GOTO 120
   70    CONTINUE
C
C        Convert (i-1)th convolved distribution to log-scale
C
         DO 80 KK = 0, IR
            DS(II, KK) = EL + ZLOG(DS(II, KK))
   80    CONTINUE
C
C        Perform convolution on logarithmic scale
C
   90    CONTINUE
         DO 110 J = 0, K2
            IF (J .GT. IL2) THEN
               IH1 = J - IL2
            ELSE
               IH1 = 0
            ENDIF
            IF (J .LT. IR) THEN
               IH2 = J
            ELSE
               IH2 = IR
            ENDIF
            DS(JJ, J) = DS(II, IH1) + HYP(J - IH1)
            DO 100 JR = IH1 + 1, IH2
               DD1 = DS(II, JR) + HYP(J - JR)
               DD2 = DS(JJ, J)
               DS(JJ, J) = SUMLG(DD1, DD2)
  100       CONTINUE
  110    CONTINUE
C
C        Reset for next step
C
  120    II = JJ
         JJ = 1 - II
         IR = K2
C
  130 CONTINUE
C
C        Normalize final distribution
C
      IF (ILS .NE. 1) THEN
         DO 140 I = 0, K2
            DS(II, I) = ZLOG(DS(II, I))
  140    CONTINUE
      ENDIF
      DSMX = DS(II, 0)
      DO 150 I = 1, K2
         DD1 = DS(II, I)
         DD2 = SUMLG(DSMX, DD1)
         DSMX = DD2
  150 CONTINUE
      DO 160 I=0, K2
         DS(II, I) = DS(II, I) - DSMX
  160 CONTINUE
      K2 = K1 + K2
      RETURN
      END
C
      REAL FUNCTION SUMLG(DD1, DD2)
C
C        ALGORITHM AS 289.2 APPL.STATIST. (1994), VOL.43, NO.1
C
C        Adds two logarithmic scale numbers
C
      REAL DD1, DD2
C
      REAL DDD, X, ZEXP, ZLOG
C
      ZEXP(X) = EXP(X)
      ZLOG(X) = LOG(X)
C
      DDD = DD1
      IF (DD2 .GT. DD1) DDD = DD2
      DD1 = ZEXP(DD1 - DDD)
      DD2 = ZEXP(DD2 - DDD)
      DDD = ZLOG(DD1 + DD2) + DDD
      SUMLG = DDD
      RETURN
      END
