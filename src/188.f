C UKC NETLIB DISTRIBUTION COPYRIGHT 1990 RSS
C
      SUBROUTINE EODSEQ(KA, IKA, LENGTH, NSTATE, MAXDEP, MAXINT, REP,
     * PERC, AU, CU, CU0, NPOINT, IFAULT)
C
C     ALGORITHM AS 188  APPL. STATIST. (1983) VOL.32, NO.2 (pp185-196)
C
C     Estimation of the order of dependence in sequences
C
      INTEGER MAXKA, MAXJF
      PARAMETER (MAXKA=10, MAXJF=20)
      INTEGER IKA, LENGTH, NSTATE, MAXDEP, MAXINT, NPOINT, IFAULT
      INTEGER KA(IKA,LENGTH)
      REAL AU(MAXDEP), CU(MAXDEP), CU0, PERC(MAXDEP)
      LOGICAL REP
C
C     Local variables
C
      INTEGER NWORD, JFIX, NGP, KTEMP, KK
      INTEGER JRANGE, MURANG, IGF, NEOS, LAST, I, NGPSIZ
      INTEGER K, LIMIT, IPASSI, NCOUNT, JFIX2, JCTEMP, IW
      REAL SUM, ALN2, ACCX
C
C..NC AND JFROG ARE ARRAYS USED FOR TEMPORARY STORAGE
C..NC(MAXKA) NEEDS TO BE CHANGED TO NC(IKA) IF IKA .GT. MAXKA
C..JFROG(MAXJF) NEEDS TO BE CHANGED TO JFROG(MAXDEP)
C..               IF MAXDEP .GT. MAXJF
C
      INTEGER NC(MAXKA), JFROG(MAXJF)
C
C..NEOS (END OF SECTION) IS A NEGATIVE INTEGER USED TO
C..SIGNIFY A BREAK IN THE INPUT SEQUENCE
C
      NEOS = -1
C
C..INITIALIZATION PROCEDURE
C..CHECK INPUT PARAMETERS AND INITIALISE LOCAL VARIABLES
C..USED IN PACKING THE CODED OBSERVATIONS
C..INTWRD = NO. OF OBSERVATIONS STORABLE IN AN INTEGER
C..NWORD =  NO. OF INTEGERS REQUIRED TO STORE LARGEST GROUP
C
      IF (IKA.LE.0 .OR. LENGTH.LE.0) GO TO 300
      IF (IKA.GT.MAXKA .OR. MAXDEP.GT.MAXJF) GO TO 300
      IF (NSTATE.LE.0 .OR. MAXDEP.LE.0 .OR. MAXINT.LE.0) GO TO 300
      ALN2 = ALOG(2.0)
      JRANGE = 0
      MURANG = 1
   10 JRANGE = JRANGE + 1
      IF (JRANGE.GT.MAXINT) GO TO 300
      MURANG = MURANG*2
      IF (NSTATE.GT.MURANG) GO TO 10
      INTWRD = MAXINT/JRANGE
      NWORD = MAXDEP/INTWRD
      JFIX = MURANG**(INTWRD-1)
      JFIX2 = JFIX
      IW3 = MAXDEP - NWORD*INTWRD
      IF (IW3.EQ.0) GO TO 20
      NWORD = NWORD + 1
      JFIX2 = MURANG**(IW3-1)
      GO TO 30
   20 IW3 = INTWRD
C
C..SECTION FOR CODING DATA
C
C..CODE UP FIRST GROUP
C
   30 IF (NWORD.GT.IKA) GO TO 300
      NGPS = 0
      NPOINT = 0
   40 JCTEMP = 0
      IW = 0
      NW = 1
      LAST = -1
C
C..CONSTRUCT FIRST MAXDEP-TUPLE IN ARRAY NC
C
      DO 60 I=1,MAXDEP
   50   NPOINT = NPOINT + 1
        IF (NPOINT.GT.LENGTH) GO TO 320
        INNON = KA(1,NPOINT)
        IF (INNON.EQ.NEOS) GO TO 320
        IF (INNON.LT.0 .OR. INNON.GT.NSTATE-1) GO TO 310
        IF (.NOT.REP .AND. (INNON.EQ.LAST)) GO TO 50
C
C..CODE MAXDEP-TUPLES INTO SUCCESSIVE COLUMNS OF THE ARRAY KA
C
        JCTEMP = JCTEMP/MURANG + INNON*JFIX
        LAST = INNON
        IW = IW + 1
        IF (IW.LT.INTWRD) GO TO 60
C
C..NEED ANOTHER INTEGER TO STORE PACKED CODES
C
        IW = 0
        NC(NW) = JCTEMP
        JCTEMP = 0
        NW = NW + 1
   60 CONTINUE
      IF (IW.NE.0) NC(NW) = JCTEMP/(MURANG**(INTWRD - IW))
C
C..END OF CONSTRUCTION OF FIRST MAXDEP-TUPLE
C..STORE IT IN THE FIRST COLUMN OF KA
C
   70 NGPS = NGPS + 1
      DO 80 I=1,NWORD
        KA(I,NGPS) = NC(I)
   80 CONTINUE
C
C..CONSTRUCT NEW MAXDEP-TUPLE IN C
C
   90 NPOINT = NPOINT + 1
      IF (NPOINT.GT.LENGTH) GO TO 120
      INNON = KA(1,NPOINT)
C
C..NEW SEQUENCE TEST
C
      IF (INNON.EQ.NEOS) GO TO 40
      IF (INNON.LT.0 .OR. INNON.GT.NSTATE-1) GO TO 310
C
C..TEST REPEAT FLAG
C
      IF (.NOT.REP .AND. (INNON.EQ.LAST)) GO TO 90
C
C..SHIFT OUT MOST ANCIENT ELEMENT AND SHIFT OTHER ELEMENTS ALONG
C
      NC(1) = NC(1)/MURANG
      IF (NWORD.LT.2) GO TO 110
      DO 100 I=2,NWORD
        JCTEMP = NC(I)/MURANG
        NC(I-1) = NC(I-1) + (NC(I)-JCTEMP*MURANG)*JFIX
        NC(I) = JCTEMP
  100 CONTINUE
  110 NC(NWORD) = NC(NWORD) + JFIX2*INNON
      LAST = INNON
      GO TO 70
C
C..ALL MAXDEP-TUPLES CONSTRUCTED NOW SORT ARRAY KA BY COLUMNS
C
  120 CALL EODSRT(KA, IKA, NGPS, NWORD)
C
C..COUNT GROUPS - DECREASING GROUP SIZE AT THE SAME TIME
C..IF A GROUP IS FOUND TO BE REPEATED M TIMES THIS MEANS
C..THAT EACH SUBGROUP WILL ALSO BE REPEATED M TIMES. TO
C..SAVE HAVING TO RECOUNT THESE SUBGROUPS THE FIRST ELEMENT
C..OF THE COLUMN FOLLOWING THE REPEATED GROUP IS USED TO
C..STORE THE REPEAT COUNT AS -(M-1).  THIS COUNT NEEDS TO
C..BE NEGATIVE TO DISTINGUISH IT FROM THE POSITIVE CODED GROUPS
C
      NW = 1
      IW = INTWRD + 1
      LAST = MAXDEP + 1
      DO 280 K=1,MAXDEP
        IW = IW - 1
        IF (IW.NE.0) GO TO 130
        IW = INTWRD
        NW = NW + 1
        IF (NW.EQ.NWORD) IW = IW3
  130   NGPSIZ = LAST - K
C
C..SET USER DEFINED TRIPWIRES
C
        LIMIT = INT(FLOAT(NGPS)*PERC(NGPSIZ)/100.0)
        SUM = 0.0
        IPASSI = 1
C
C..START TO PROCESS NEW GROUP
C..FIRST - SAVE IT IN ARRAY NC
C
  140   DO 150 I=NW,NWORD
          NC(I) = KA(I,IPASSI)
  150   CONTINUE
C
C..REMOVE LEAST SIGNIFICANT GROUP ELEMENT
C
        KA(NW,IPASSI) = KA(NW,IPASSI)/MURANG
C
C..UNSET IGF (IDENTICAL GROUP FOUND) FLAG
C
        IGF = 0
        NCOUNT = 1
C
C..LOOK AT INFORMATION ON NEXT GROUP (IF ANY)
C
  160   IPASSI = IPASSI + 1
        IF (IPASSI.GT.NGPS) GO TO 190
        KTEMP = KA(1,IPASSI)
        IF (KTEMP.GE.0) GO TO 170
C
C..A NEGATIVE ELEMENT MEANS THE CONTENTS ARE A REPEAT COUNT
C..SUBTRACT IT FROM BOTH THE POINTER AND THE COUNT
C
        NCOUNT = NCOUNT - KTEMP
        IPASSI = IPASSI - KTEMP
        IF (IPASSI.GT.NGPS) GO TO 190
C
C..REAL GROUP ENCOUNTERED - TEST IF SAME AS LAST ONE
C
  170   DO 180 I=NW,NWORD
          IF (KA(I,IPASSI).NE.NC(I)) GO TO 190
  180   CONTINUE
C
C..IDENTICAL GROUP FOUND  SET IGF FLAG
C
        IGF = 1
        NCOUNT = NCOUNT + 1
        GO TO 160
C
C..NEW GROUP FOUND OR NO MORE GROUPS
C..UPDATE AVERAGE UNCERTAINTY SUM
C
  190   ACCX = FLOAT(NCOUNT)
        SUM = SUM + ACCX*ALOG(ACCX)
        IF (NCOUNT.LE.LIMIT) GO TO 260
C
C..LAST GROUP OCCURS SUFFICIENTLY FREQUENTLY - UNPACK GROUP AND
C..PASS GROUP, SIZE AND FREQUENCY TO USER SUPPLIED ROUTINE
C..OUTFRG
C..FIRST WORD - MAY NOT BE FULL
C
        NGP = NC(NW)
        J = 0
        DO 200 I=1,IW
          J = J + 1
          KTEMP = NGP/MURANG
          JFROG(J) = NGP - KTEMP*MURANG
          NGP = KTEMP
  200   CONTINUE
C
C..MIDDLE WORDS - ALL FULL
C
        IF (NGPSIZ.EQ.IW) GO TO 250
        JCTEMP = NWORD - 1
        IF (NW.EQ.JCTEMP) GO TO 230
        NW2 = NW + 1
        KK = NW
        DO 220 I=NW2,JCTEMP
          KK = KK + 1
          NGP = NC(KK)
          DO 210 L=1,INTWRD
            J = J + 1
            KTEMP = NGP/MURANG
            JFROG(J) = NGP - KTEMP*MURANG
            NGP = KTEMP
  210     CONTINUE
  220   CONTINUE
C
C..LAST WORD - MAY NOT BE FULL
C
  230   NGP = NC(NWORD)
        DO 240 I=1,IW3
          J = J + 1
          KTEMP = NGP/MURANG
          JFROG(J) = NGP - KTEMP*MURANG
          NGP = KTEMP
  240   CONTINUE
  250   CONTINUE
        CALL OUTFRG(JFROG, NGPSIZ, NCOUNT)
  260   IF (IGF.EQ.0) GO TO 270
C
C..IGF FLAG SET - STORE REPEAT COUNT
C
        KTEMP = IPASSI + 1 - NCOUNT
        KA(1,KTEMP) = 1 - NCOUNT
C
C..ESTIMATE AVERAGE UNCERTAINTY AND CONDITIONAL UNCERTAINTY
C
  270   IF (IPASSI.LE.NGPS) GO TO 140
        ACCX = FLOAT(NGPS)
        AU(NGPSIZ) = -(SUM/ACCX - ALOG(ACCX))/ALN2
  280 CONTINUE
      DO 290 K=2,MAXDEP
        CU(K) = AU(K) - AU(K-1)
  290 CONTINUE
      CU(1) = AU(1)
      CU0 = ALOG(FLOAT(NSTATE))/ALN2
      IFAULT = 0
      RETURN
C
C..ERROR EXITS
C
C..IFAULT=1 - NSTATE-1 NOT STORABLE IN AN INTEGER
C..
C..  OR       NUMBER OF INTEGERS REQUIRED TO STORE TO
C..           GIVEN MAXDEP .GT. IKA
C..
C..  OR       ONE OF IKA, LENGTH, NSTATE, MAXDEP OR
C.            MAXINT .LE. 0
C
  300 IFAULT = 1
      RETURN
C
C..IFAULT=2 - ILLEGAL ACTIVITY NUMBER AT POSITION NPOINT IN
C..           THE PREPARED DATA STRING.  NUMBER EITHER GREATER
C..            THAN NSTATE-1 OR LESS THAN ZERO AND NOT EQUAL TO EOS
C
  310 IFAULT = 2
      RETURN
C
C..IFAULT=3 - DATA STRING IS TO SHORT ENDING AT POSITION NPOINT
C..           IN THE PREPARED DATA STRING
C
  320 IFAULT = 3
      RETURN
      END
      SUBROUTINE EODSRT(KA, IKA, NGPS, NWORD)
C
C..ROUTINE TO SORT ARRAY A BY COLUMNS FROM IKA TO 1
C..I.E. FIRST SORT KA(IKA,1).LT.KA(IKA,2).LT.KA(IKA,3).......
C..THEN            KA(IKA-1,1).LT.KA(IKA-1,2).LT.KA(IKA-1,3)......
C..E.T.C
C..THIS ROUTINE IS BASED ON M01AQF FROM THE NAG MK8
C..FORTRAN LIBRARY AND SINGLETON (1969)
C
      PARAMETER (MAXKA=10)
      INTEGER IKA, NWORD
      INTEGER KA(IKA,NGPS), IL(22), IU(22)
C
C..NOTE  IF MORE THAN 10 WORDS ARE REQUIRED FOR STORING
C..THE MAXIMUM SIZE GROUP THE FOLLOWING ARRAY
C..DECLARATIONS MUST BE INCREASED.
C
      INTEGER IT(MAXKA), ITT(MAXKA)
      NWORD1 = NWORD + 1
      M = 1
      I = 1
      J = NGPS
      II = I
   10 IF (I-J.GE.0) GO TO 240
   20 K = I
      IJ = (J+I)/2
      DO 30 MM=1,NWORD
        IT(MM) = KA(MM,IJ)
   30 CONTINUE
      MM = NWORD1
      DO 40 NN=1,NWORD
        MM = MM - 1
        IF (KA(MM,I)-IT(MM)) 70, 40, 50
   40 CONTINUE
      GO TO 70
   50 DO 60 MM=1,NWORD
        KA(MM,IJ) = KA(MM,I)
        KA(MM,I) = IT(MM)
        IT(MM) = KA(MM,IJ)
   60 CONTINUE
   70 L = J
      MM = NWORD1
      DO 80 NN=1,NWORD
        MM = MM - 1
        IF (KA(MM,J)-IT(MM)) 90, 80, 160
   80 CONTINUE
      GO TO 160
   90 DO 100 MM=1,NWORD
        KA(MM,IJ) = KA(MM,J)
        KA(MM,J) = IT(MM)
        IT(MM) = KA(MM,IJ)
  100 CONTINUE
      MM = NWORD1
      DO 110 NN=1,NWORD
        MM = MM - 1
        IF (KA(MM,I)-IT(MM)) 160, 110, 120
  110 CONTINUE
      GO TO 160
  120 DO 130 MM=1,NWORD
        KA(MM,IJ) = KA(MM,I)
        KA(MM,I) = IT(MM)
        IT(MM) = KA(MM,IJ)
  130 CONTINUE
      GO TO 160
  140 DO 150 MM=1,NWORD
        KA(MM,L) = KA(MM,K)
        KA(MM,K) = ITT(MM)
  150 CONTINUE
  160 L = L - 1
      MM = NWORD1
      DO 170 NN=1,NWORD
        MM = MM - 1
        IF (KA(MM,L)-IT(MM)) 180, 170, 160
  170 CONTINUE
  180 DO 190 MM=1,NWORD
        ITT(MM) = KA(MM,L)
  190 CONTINUE
  200 K = K + 1
      MM = NWORD1
      DO 210 NN=1,NWORD
        MM = MM - 1
        IF (KA(MM,K)-IT(MM)) 200, 210, 220
  210 CONTINUE
  220 IF (K-L.LE.0) GO TO 140
      IF (L-I-J+K.LE.0) GO TO 230
      IL(M) = I
      IU(M) = L
      I = K
      M = M + 1
      GO TO 250
  230 IL(M) = K
      IU(M) = J
      J = L
      M = M + 1
      GO TO 250
  240 M = M - 1
      IF (M.EQ.0) GO TO 360
      I = IL(M)
      J = IU(M)
  250 IF (J-I-11.GE.0) GO TO 20
      IF (I-II) 270, 10, 270
  260 I = I + 1
  270 IF (I-J.EQ.0) GO TO 240
      I1 = I + 1
      DO 280 MM=1,NWORD
        IT(MM) = KA(MM,I1)
  280 CONTINUE
      MM = NWORD1
      DO 290 NN=1,NWORD
        MM = MM - 1
        IF (KA(MM,I)-IT(MM))260,290,300
  290 CONTINUE
      GO TO 260
  300 K = I
  310 K1 = K + 1
      DO 320 MM=1,NWORD
        KA(MM,K1) = KA(MM,K)
  320 CONTINUE
      MM = NWORD1
      K = K - 1
      DO 330 NN=1,NWORD
        MM = MM - 1
        IF (IT(MM)-KA(MM,K)) 310, 330, 340
  330 CONTINUE
  340 K1 = K + 1
      DO 350 MM=1,NWORD
        KA(MM,K1) = IT(MM)
  350 CONTINUE
      GO TO 260
  360 RETURN
      END
