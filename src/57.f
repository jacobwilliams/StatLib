CSTART OF AS 57
      SUBROUTINE TABWRT(TITLE, NT1, NT2, TABLE, NTAB, DIM, NVAR,
     $  LOC, COL, DEC, VARNAM, WORDS, CATNAM, MAXCAT, COLLAB,
     $  VERT, RESTOR, LINE, SKIP, PAGE, WIDTH, UNIT, IFAULT)
C
C        ALGORITHM AS 57  APPL. STATIST. (1973) VOL.22, P.118
C
C        TABWRT PRINTS MULTIDIMENSIONAL TABLES.
C
C        A TABLE CAN HAVE AT MOST MAXVAR VARIABLES. NOTE THAT
C        SIZE HAS DIMENSION MAXVAR+1 AND COORD HAS DIMENSION MAXVAR
C
      LOGICAL RESTOR
      INTEGER DIM(NVAR), COL, LOC(COL), DEC(COL), WORDS, VERT
      INTEGER SKIP, PAGE, WIDTH, UNIT
      INTEGER SIZE(8), COORD(7), HOR, DOWN, SPACE, ONEPAG
C
C        ARRAYS CONTAINING DATA AND LABELS
C
      REAL TITLE(NT1, NT2), TABLE(NTAB), VARNAM(WORDS, NVAR),
     $  CATNAM(WORDS, MAXCAT, NVAR), COLLAB(WORDS, COL)
      REAL OUT(33), CHAR(3)
      REAL TAB1, TAB2, XLAB1, XLAB2, XLAB3
C
C        VARIABLE FORMATS.
C
      REAL FMT(15), FMTT(7)
      DATA FMTT(1),FMTT(2),FMTT(3),FMTT(4),FMTT(5),FMTT(6),FMTT(7)
     $    /4H(A1, ,1H     ,2HX,   ,1H     ,1HA    ,1H     ,1H)    /
C
      DATA FMT(1),FMT(2),FMT(3),FMT(4),FMT(5),FMT(6),FMT(7),FMT(8)
     $    /4H(A1,,1H    ,2HX,  ,1H    ,4H(4X,,1H    ,1HA   ,1H    /
C
      DATA FMT(9),FMT(10),FMT(11),FMT(12),FMT(13),FMT(14),FMT(15)
     $    /2H),  ,1H     ,1HF    ,1H     ,1H.    ,1H0    ,1H)    /
C
C        CARRIAGE CONTROL.
C
      DATA CHAR(1), CHAR(2), CHAR(3) /1H , 1H0, 1H1/
C
C        ADJUSTABLE CONSTANTS - SEE INTRODUCTORY TEXT
C
      DATA LENGTH, MAXVAR /4, 7/
C
C        SET ERROR INDICATOR AND GET SIZES.
C
      IFAULT = 0
      IF (NVAR .GT. MAXVAR) GOTO 98
      SIZE(1) = 1
      DO 1 I = 1, NVAR
      COORD(I) = 1
      IF (DIM(I) .LE. 0) GOTO 2
      IF (DIM(I) .GT. MAXCAT) GOTO 98
      SIZE(I + 1) = SIZE(I) * DIM(I)
    1 CONTINUE
      I = NVAR + 1
    2 N = I - 1
      DOWN = VERT
C
C        ALLOCATE VARIABLES TO HORIZONTAL AND VERTICAL SCALES.
C
      IF (DOWN .GT. N) DOWN = N
      IF (DOWN .LT. 1) DOWN = 1
      HOR = N - DOWN
C
C        LABELW IS WIDTH OF LABEL.
C
      LABELW = WORDS * LENGTH + 4
      I = HOR + 1
      K = I
      DO 3 J = 1, I
C
C        GET LINE WIDTH.
C
      LINEW = LABELW * (SIZE(K) + DOWN + 1)
      IF (LINEW .LT. WIDTH) GOTO 4
      K = K - 1
      DOWN = DOWN + 1
    3 CONTINUE
C
C        NOTE THAT LINE IS NOT WIDE ENOUGH.
C
      IFAULT = 2
      RETURN
    4 HOR = N - DOWN
C
C        SET FORMATS. CONVRT IS AN AUXILIARY
C        INTEGER TO ALPHANUMERIC ROUTINE.
C
      FMTT(2) = CONVRT((WIDTH - LENGTH * NT1) / 2 + 1)
      FMTT(4) = CONVRT(NT1)
      FMTT(6) = CONVRT(LENGTH)
      FMT(8) = FMTT(6)
      I = (WIDTH - LINEW) / 2 + 1
      TAB1 = CONVRT(I)
      TAB2 = CONVRT(I + LABELW * DOWN)
      XLAB1 = CONVRT(DOWN + 1)
      XLAB2 = CONVRT(1)
      FMT(6) = CONVRT(WORDS)
      FMT(12) = CONVRT(LABELW)
C
C        NOW ASCERTAIN VERTICAL SPACE REQUIREMENTS.
C
      SPACE = (COL + 1) * SIZE(N + 1) / SIZE(HOR + 1)
      ONEPAG = SPACE + 2 + HOR + NT2 + NT2 + SKIP
      IF (RESTOR .OR. LINE + ONEPAG .GT. PAGE) LINE = 0
      ICAR = 2
C
C        SEE IF CARRIAGE RESTORE NEEDED
C
      IF (LINE .NE. 0) GOTO 5
      ICAR = 3
      GOTO 7
C
C        SKIP APPROPRIATE NUMBER OF LINES.
C
    5 DO 6 I = 1, SKIP
    6 WRITE (UNIT, 100)
  100 FORMAT(1H )
    7 I = LINE + ONEPAG
      IF (I .LE. PAGE) LINE = I
C
C        SEE HOW MUCH FITS ON A PAGE.
C
      INDEX = N + 1
      K = PAGE - 2 - HOR - NT2 - NT2
      DO 8 I = 1, DOWN
      IF (SPACE .LE. K) GOTO 9
      INDEX = INDEX - 1
      SPACE = SPACE / DIM(INDEX)
    8 CONTINUE
C
C        RETURN WITH IFAULT = 2 IF TOO LITTLE SPACE AVAILABLE.
C
      IFAULT = 2
      RETURN
C
C        NOTCH IS UNITS PER PAGE.
C
    9 NOTCH = K / SPACE * SIZE(INDEX)
      INC = SIZE(HOR + 1)
      INC1 = INC - 1
      XLAB3 = CONVRT(INC + 1)
      FMT(10) = CONVRT(INC)
      NUM = (SIZE(N + 1) + NOTCH - 1) / NOTCH * NOTCH
      LL = HOR + 1
C
C        SET MARKER.
C
      MARK = 0
      INDEX = WORDS * DOWN
C
C        PRINT A PAGE.
C
      DO 18 I = NOTCH, NUM, NOTCH
      IC = ICAR
C
C        PRINT TITLE.
C
      DO 10 K = 1, NT2
      WRITE (UNIT, FMTT) CHAR(IC), (TITLE(J, K), J = 1, NT1)
      IC = 1
   10 CONTINUE
C
C        SKIP TWO LINES.
C
      WRITE (UNIT, 101)
  101 FORMAT(1H0)
C
C        PRINT HORIZONTAL LABELS.
C
      IF (HOR .EQ. 0) GOTO 12
      FMT(2) = TAB2
      FMT(4) = XLAB3
      DO 11 K = 1, HOR
      L = HOR - K + 1
      I1 = SIZE(L)
      I2 = SIZE(L + 1)
      I3 = DIM(L)
      WRITE (UNIT, FMT) CHAR(1), (VARNAM(I4, L), I4 = 1, WORDS),
     $  ((((CATNAM(I4, I5, L), I4 = 1, WORDS), I6 = 1, I1),
     $  I5 = 1, I3), I7 = I2, INC, I2)
   11 CONTINUE
C
C        VERTICAL LABELS.
C
   12 J = 0
      FMT(2) = TAB1
      FMT(4) = XLAB1
      M = N + 1
      DO 13 K = LL, N
      M = M - 1
      DO 13 I1 = 1, WORDS
      J = J + 1
      OUT(J) = VARNAM(I1, M)
   13 CONTINUE
      WRITE (UNIT, FMT) CHAR(1), (OUT(J), J = 1, INDEX)
C
C        NOW PRINT BODY OF TABLE.
C
      DO 18 I2 = INC, NOTCH, INC
      J = 0
      M = N + 1
      DO 14 K = LL, N
      M = M - 1
      I3 = COORD(M)
      DO 14 I1 = 1, WORDS
      J = J + 1
      OUT(J) = CATNAM(I1, I3, M)
   14 CONTINUE
      I3 = LOC(1) + MARK
      I4 = I3 + INC1
      FMT(2) = TAB1
      FMT(4) = XLAB1
      FMT(14) = CONVRT(DEC(1))
      WRITE (UNIT, FMT) CHAR(2), (OUT(J), J = 1, INDEX),
     $  (COLLAB(J, 1), J = 1, WORDS), (TABLE(I5), I5 = I3, I4)
      IF (COL .LE. 1) GOTO 16
      FMT(2) = TAB2
      FMT(4) = XLAB2
      DO 15 I6 = 2, COL
      I3 = LOC(I6) + MARK
      I4 = I3 + INC1
      FMT(14) = CONVRT(DEC(I6))
      WRITE (UNIT, FMT) CHAR(1), (COLLAB(I5, I6), I5 = 1, WORDS),
     $  (TABLE(I5), I5 = I3, I4)
   15 CONTINUE
   16 MARK = MARK + INC
C
C        RESET COORDINATES.
C
      DO 17 I1 = LL, N
      COORD(I1) = COORD(I1) + 1
      IF (COORD(I1) .LE. DIM(I1)) GOTO 18
      COORD(I1) = 1
   17 CONTINUE
      RETURN
   18 CONTINUE
C
C        ERROR RETURN.
C
   98 IFAULT = 1
      RETURN
      END
C
      FUNCTION CONVRT(I)
C
C        ALGORITHM AS 57.1  APPL. STATIST. (1973) VOL.22, P.118
C
C        CONVERT FROM INTEGER TO ALPHANUMERIC.
C        THE NORMAL RANGE FOR CONVRT IS FROM 0 TO 101.
C        ALL INTEGERS TO BE CONVERTED WILL BE WITHIN THIS
C        RANGE IF WIDTH DOES NOT EXCEED 131, LENGTH IS AT
C        LEAST 4, AND MAXVAR DOES NOT EXCEED 7.
C
      REAL C(102)
      DATA  C(1), C(2), C(3), C(4), C(5) / 1H0, 1H1, 1H2, 1H3, 1H4/
      DATA  C(6), C(7), C(8), C(9),C(10) / 1H5, 1H6, 1H7, 1H8, 1H9/
      DATA C(11),C(12),C(13),C(14),C(15) /2H10,2H11,2H12,2H13,2H14/
      DATA C(16),C(17),C(18),C(19),C(20) /2H15,2H16,2H17,2H18,2H19/
      DATA C(21),C(22),C(23),C(24),C(25) /2H20,2H21,2H22,2H23,2H24/
      DATA C(26),C(27),C(28),C(29),C(30) /2H25,2H26,2H27,2H28,2H29/
      DATA C(31),C(32),C(33),C(34),C(35) /2H30,2H31,2H32,2H33,2H34/
      DATA C(36),C(37),C(38),C(39),C(40) /2H35,2H36,2H37,2H38,2H39/
      DATA C(41),C(42),C(43),C(44),C(45) /2H40,2H41,2H42,2H43,2H44/
      DATA C(46),C(47),C(48),C(49),C(50) /2H45,2H46,2H47,2H48,2H49/
      DATA C(51),C(52),C(53),C(54),C(55) /2H50,2H51,2H52,2H53,2H54/
      DATA C(56),C(57),C(58),C(59),C(60) /2H55,2H56,2H57,2H58,2H59/
      DATA C(61),C(62),C(63),C(64),C(65) /2H60,2H61,2H62,2H63,2H64/
      DATA C(66),C(67),C(68),C(69),C(70) /2H65,2H66,2H67,2H68,2H69/
      DATA C(71),C(72),C(73),C(74),C(75) /2H70,2H71,2H72,2H73,2H74/
      DATA C(76),C(77),C(78),C(79),C(80) /2H75,2H76,2H77,2H78,2H79/
      DATA C(81),C(82),C(83),C(84),C(85) /2H80,2H81,2H82,2H83,2H84/
      DATA C(86),C(87),C(88),C(89),C(90) /2H85,2H86,2H87,2H88,2H89/
      DATA C(91),C(92),C(93),C(94),C(95) /2H90,2H91,2H92,2H93,2H94/
      DATA C(96),C(97),C(98),C(99),C(100)/2H95,2H96,2H97,2H98,2H99/
      DATA C(101),C(102)                 /3H100,3H101/
      J = I + 1
      IF (J .LT. 1) J = 1
      IF (J .GT. 102) J = 102
      CONVRT = C(J)
      RETURN
      END
CEND OF AS 57
