      SUBROUTINE PKURT(B2, N, P, ZP, IFAULT)
C
C        ALGORITHM AS209  APPL. STATIST. (1985) VOL. 34, NO. 1
C
C        EVALUATES P VALUE FOR COEFFICIENT OF KURTOSIS B2.
C        N IS SAMPLE SIZE, N GE 5.
C        ZP IS NORMAL EQUIVALENT DEVIATE FOR P.
C        BASED ON SIMULATIONS OF DISTRIBUTION OF B2 APPROXIMATED
C        BY MODIFIED SU. USES FIRST ORDER APPROXIMATION TO MEAN AND SD
C       OF TRANSFORMED B2 FOR N GT 5000.
C        APPROXIMATION ACCURATE TO ABOUT +/- 0.05 FOR ZP IN RANGE -3.1
C        LT ZP LT 3.1.
C
C        IFAULT = 0   OK
C        1   B2 LT 0
C        2   N LT 15
C        3   P(B2) LT 0.0001 (WHEN NLT15) : P RETURNED AS 0.0001
C        4   P(B2) GT 0.9999 (WHEN NLT15) : P RETURNED AS 0.9999
C        5,6 INTERNAL ERROR IN COMPUTING B-SPLINE INTERPOLANT
C        7   B2 BELOW EXTRAPOLATED SIMULATION LIMIT: P AND ZP RETURNED
C        AS 0
C
      INTEGER N1(22), N2(19)
      REAL LAMDA, CSL1(22), CI1(22), CSL2(19), CI2(19), KNOT(24)
      REAL PERC(20, 10), PWRK(20), COEF(24), PERZ(20)
C
C        WRK IS WORKING ARRAY OF DIM LWRK = (NO. OF POINTS)*6 + 16 =
C        136 FOR 20.
C
      REAL WRK(136), LOWP, LOWZ
      LOGICAL LOWER
      DATA MSMALL /22/, MBIG /19/, M /20/, LWRK /136/, I5000 /5000/,
     *  I100 /100/
      DATA LOWP /0.0001/, LOWZ /-3.71902/
      DATA ZERO /0.0E0/, ONE /1.0E0/, TWO /2.0E0/, THREE /3.0E0/, FIVE /
     *  5.0E0/
      DATA TWENT4 /24.0E0/, HUNDRD /100.0E0/, LOWER /.FALSE./
C
      DATA N1(1), N1(2), N1(3), N1(4), N1(5) /15, 15, 15, 15, 17/
      DATA N1(6), N1(7), N1(8), N1(9), N1(10) /18, 19, 20, 22, 25/
      DATA N1(11), N1(12), N1(13), N1(14), N1(15) /30, 35, 40, 45, 50/
      DATA N1(16), N1(17), N1(18), N1(19), N1(20) /60, 70, 80, 100, 100/
      DATA N1(21), N1(22) /100, 100/
C
      DATA N2(1), N2(2), N2(3), N2(4), N2(5) /100, 100, 100, 100, 140/
      DATA N2(6), N2(7), N2(8), N2(9), N2(10) /160, 180, 200, 250, 300/
      DATA N2(11), N2(12), N2(13), N2(14), N2(15) /400, 500, 600, 800,
     *  1000/
      DATA N2(16), N2(17), N2(18), N2(19) /5000, 5000, 5000, 5000/
C
      DATA CSL1(1), CSL1(2), CSL1(3) /0.130608, 0.130309, 0.130799/
      DATA CSL1(4), CSL1(5), CSL1(6) /0.131271, 0.130269, 0.131037/
      DATA CSL1(7), CSL1(8), CSL1(9) /0.133146, 0.131201, 0.131552/
      DATA CSL1(10), CSL1(11), CSL1(12) /0.134288, 0.136172, 0.139247/
      DATA CSL1(13), CSL1(14), CSL1(15) /0.145013, 0.153807, 0.167036/
      DATA CSL1(16), CSL1(17), CSL1(18) /0.191936, 0.217312, 0.246664/
      DATA CSL1(19), CSL1(20), CSL1(21), CSL1(22) /0.0, 0.0, 0.0, 0.0/
C
      DATA CI1(1), CI1(2), CI1(3) /0.991947, 0.984242, 0.981813/
      DATA CI1(4), CI1(5), CI1(6) /0.967821, 0.962803, 0.951360/
      DATA CI1(7), CI1(8), CI1(9) /0.934610, 0.909853, 0.873722/
      DATA CI1(10), CI1(11), CI1(12) /0.823252, 0.772149, 0.716999/
      DATA CI1(13), CI1(14), CI1(15) /0.639262, 0.531453, 0.375579/
      DATA CI1(16), CI1(17), CI1(18) /0.141451, -0.096974, -0.316306/
      DATA CI1(19), CI1(20), CI1(21), CI1(22) /0.0, 0.0, 0.0, 0.0/
C
      DATA CSL2(1), CSL2(2), CSL2(3) /0.246227, 0.242238, 0.264287/
      DATA CSL2(4), CSL2(5), CSL2(6) /0.290128, 0.307728, 0.316642/
      DATA CSL2(7), CSL2(8), CSL2(9) /0.322317, 0.304390, 0.284983/
      DATA CSL2(10), CSL2(11), CSL2(12) /0.267009, 0.240296, 0.221648/
      DATA CSL2(13), CSL2(14), CSL2(15) /0.162402, 0.111749, 0.092712/
      DATA CSL2(16), CSL2(17), CSL2(18), CSL2(19) /0.0, 0.0, 0.0, 0.0/
C
      DATA CI2(1), CI2(2), CI2(3) /-0.320361, -0.338391, -0.439550/
      DATA CI2(4), CI2(5), CI2(6) /-0.592816, -0.678397, -0.754728/
      DATA CI2(7), CI2(8), CI2(9) /-0.794209, -0.800182, -0.788895/
      DATA CI2(10), CI2(11), CI2(12) /-0.765971, -0.760544, -0.746093/
      DATA CI2(13), CI2(14), CI2(15) /-0.733140, -0.724729, -0.719960/
      DATA CI2(16), CI2(17), CI2(18), CI2(19) /0.0, 0.0, 0.0, 0.0/
C
      DATA PERC(1, 1), PERC(2, 1), PERC(3, 1), PERC(4, 1), PERC(5, 1)
     *  /1.170, 1.173, 1.177, 1.196, 1.212/
      DATA PERC(6, 1), PERC(7, 1), PERC(8, 1), PERC(9, 1), PERC(10, 1)
     *  /1.244, 1.278, 1.348, 1.497, 1.808/
      DATA PERC(11, 1), PERC(12, 1), PERC(13, 1), PERC(14, 1), PERC(15,
     *  1) /2.133, 2.465, 2.694, 2.875, 3.003/
      DATA PERC(16, 1), PERC(17, 1), PERC(18, 1), PERC(19, 1), PERC(20,
     *  1) /3.110, 3.162, 3.219, 3.230, 3.244/
C
      DATA PERC(1, 2), PERC(2, 2), PERC(3, 2), PERC(4, 2), PERC(5, 2)
     *  /1.016, 1.042, 1.059, 1.136, 1.189/
      DATA PERC(6, 2), PERC(7, 2), PERC(8, 2), PERC(9, 2), PERC(10, 2)
     *  /1.287, 1.382, 1.488, 1.598, 1.867/
      DATA PERC(11, 2), PERC(12, 2), PERC(13, 2), PERC(14, 2), PERC(15,
     *  2) /2.211, 2.667, 2.993, 3.281, 3.516/
      DATA PERC(16, 2), PERC(17, 2), PERC(18, 2), PERC(19, 2), PERC(20,
     *  2) /3.746, 3.875, 4.047, 4.084, 4.138/
C
      DATA PERC(1, 3), PERC(2, 3), PERC(3, 3), PERC(4, 3), PERC(5, 3)
     *  /1.116, 1.139, 1.155, 1.213, 1.252/
      DATA PERC(6, 3), PERC(7, 3), PERC(8, 3), PERC(9, 3), PERC(10, 3)
     *  /1.329, 1.416, 1.533, 1.699, 1.949/
      DATA PERC(11, 3), PERC(12, 3), PERC(13, 3), PERC(14, 3), PERC(15,
     *  3) /2.277, 2.779, 3.188, 3.544, 3.872/
      DATA PERC(16, 3), PERC(17, 3), PERC(18, 3), PERC(19, 3), PERC(20,
     *  3) /4.227, 4.443, 4.775, 4.868, 5.010/
C
      DATA PERC(1, 4), PERC(2, 4), PERC(3, 4), PERC(4, 4), PERC(5, 4)
     *  /1.077, 1.131, 1.162, 1.265, 1.315/
      DATA PERC(6, 4), PERC(7, 4), PERC(8, 4), PERC(9, 4), PERC(10, 4)
     *  /1.391, 1.469, 1.581, 1.753, 2.032/
      DATA PERC(11, 4), PERC(12, 4), PERC(13, 4), PERC(14, 4), PERC(15,
     *  4) /2.340, 2.853, 3.316, 3.722, 4.110/
      DATA PERC(16, 4), PERC(17, 4), PERC(18, 4), PERC(19, 4), PERC(20,
     *  4) /4.560, 4.851, 5.351, 5.491, 5.770/
C
      DATA PERC(1, 5), PERC(2, 5), PERC(3, 5), PERC(4, 5), PERC(5, 5)
     *  /1.132, 1.180, 1.208, 1.297, 1.350/
      DATA PERC(6, 5), PERC(7, 5), PERC(8, 5), PERC(9, 5), PERC(10, 5)
     *  /1.439, 1.524, 1.634, 1.801, 2.089/
      DATA PERC(11, 5), PERC(12, 5), PERC(13, 5), PERC(14, 5), PERC(15,
     *  5) /2.408, 2.910, 3.398, 3.844, 4.263/
      DATA PERC(16, 5), PERC(17, 5), PERC(18, 5), PERC(19, 5), PERC(20,
     *  5) /4.807, 5.156, 5.801, 6.013, 6.371/
C
      DATA PERC(1, 6), PERC(2, 6), PERC(3, 6), PERC(4, 6), PERC(5, 6)
     *  /1.145, 1.217, 1.247, 1.338, 1.390/
      DATA PERC(6, 6), PERC(7, 6), PERC(8, 6), PERC(9, 6), PERC(10, 6)
     *  /1.476, 1.565, 1.679, 1.844, 2.133/
      DATA PERC(11, 6), PERC(12, 6), PERC(13, 6), PERC(14, 6), PERC(15,
     *  6) /2.458, 2.963, 3.467, 3.943, 4.419/
      DATA PERC(16, 6), PERC(17, 6), PERC(18, 6), PERC(19, 6), PERC(20,
     *  6) /4.981, 5.389, 6.183, 6.448, 6.925/
C
      DATA PERC(1, 7), PERC(2, 7), PERC(3, 7), PERC(4, 7), PERC(5, 7)
     *  /1.189, 1.239, 1.273, 1.372, 1.428/
      DATA PERC(6, 7), PERC(7, 7), PERC(8, 7), PERC(9, 7), PERC(10, 7)
     *  /1.513, 1.600, 1.718, 1.888, 2.178/
      DATA PERC(11, 7), PERC(12, 7), PERC(13, 7), PERC(14, 7), PERC(15,
     *  7) /2.505, 3.009, 3.506, 4.002, 4.492/
      DATA PERC(16, 7), PERC(17, 7), PERC(18, 7), PERC(19, 7), PERC(20,
     *  7) /5.110, 5.547, 6.411, 6.760, 7.304/
C
      DATA PERC(1, 8), PERC(2, 8), PERC(3, 8), PERC(4, 8), PERC(5, 8)
     *  /1.198, 1.272, 1.303, 1.401, 1.457/
      DATA PERC(6, 8), PERC(7, 8), PERC(8, 8), PERC(9, 8), PERC(10, 8)
     *  /1.545, 1.635, 1.753, 1.925, 2.212/
      DATA PERC(11, 8), PERC(12, 8), PERC(13, 8), PERC(14, 8), PERC(15,
     *  8) /2.539, 3.045, 3.544, 4.043, 4.542/
      DATA PERC(16, 8), PERC(17, 8), PERC(18, 8), PERC(19, 8), PERC(20,
     *  8) /5.178, 5.663, 6.645, 7.050, 7.750/
C
      DATA PERC(1, 9), PERC(2, 9), PERC(3, 9), PERC(4, 9), PERC(5, 9)
     *  /1.230, 1.301, 1.337, 1.431, 1.486/
      DATA PERC(6, 9), PERC(7, 9), PERC(8, 9), PERC(9, 9), PERC(10, 9)
     *  /1.577, 1.665, 1.784, 1.955, 2.246/
      DATA PERC(11, 9), PERC(12, 9), PERC(13, 9), PERC(14, 9), PERC(15,
     *  9) /2.570, 3.075, 3.575, 4.085, 4.602/
      DATA PERC(16, 9), PERC(17, 9), PERC(18, 9), PERC(19, 9), PERC(20,
     *  9) /5.294, 5.802, 6.817, 7.242, 8.037/
C
      DATA PERC(1, 10), PERC(2, 10), PERC(3, 10), PERC(4, 10), PERC(5,
     *  10) /1.249, 1.321, 1.354, 1.457, 1.510/
      DATA PERC(6, 10), PERC(7, 10), PERC(8, 10), PERC(9, 10), PERC(10,
     *  10) /1.602, 1.694, 1.814, 1.985, 2.274/
      DATA PERC(11, 10), PERC(12, 10), PERC(13, 10), PERC(14, 10),
     *  PERC(15, 10) /2.597, 3.095, 3.589, 4.088, 4.602/
      DATA PERC(16, 10), PERC(17, 10), PERC(18, 10), PERC(19, 10),
     *  PERC(20, 10) /5.282, 5.769, 6.861, 7.296, 8.166/
C
      DATA PERZ(1), PERZ(2), PERZ(3) /-3.71902, -3.29053, -3.09023/
      DATA PERZ(4), PERZ(5), PERZ(6) /-2.57583, -2.32635, -1.95996/
      DATA PERZ(7), PERZ(8), PERZ(9) /-1.64485, -1.28155, -0.84162/
      DATA PERZ(10), PERZ(11), PERZ(12) /-0.25335, 0.25335, 0.84162/
      DATA PERZ(13), PERZ(14), PERZ(15) /1.28155, 1.64485, 1.95996/
      DATA PERZ(16), PERZ(17), PERZ(18) /2.32635, 2.57583, 3.09023/
      DATA PERZ(19), PERZ(20) /3.29053, 3.71902/
C
C        DEFINE FUNCTIONS OF SAMPLE SIZE FOR THE MEAN AND VARIANCE OF
C        B2.
C
      EB2(AN) = THREE * (AN - ONE) / (AN + ONE)
      VB2(AN) = TWENT4 * AN * (AN - TWO) * (AN - THREE) / ((AN + ONE)
     *  * (AN + ONE) * (AN + THREE) * (AN + FIVE) )
C
C        SET SMALLEST ARGUMENT FOR EXP
C
      ENEG = X02AEF(DUMMY)
C
      P = ZERO
      ZP = ZERO
      IFAULT = 2
      IF (N .LT. 5) RETURN
      IFAULT = 1
      IF (B2 .LT. ZERO) RETURN
      IFAULT = 0
      IF (N .GT. 14) GOTO 20
C
C        VERY SMALL SAMPLES. USE SPLINE APPROX TO SIMULATION PERCENTAGE
C        POINTS.
C        TRANSFER APPROPRIATE PERCENTILES TO WORKING ARRAY
C
      N4 = N - 4
      IFAULT = 3
      P = LOWP
      ZP = LOWZ
      IF (B2 .LT. PERC(1, N4)) RETURN
      IFAULT = 4
      P = ONE - LOWP
      ZP = -LOWZ
      IF (B2 .GT. PERC(M, N4)) RETURN
      IFAULT = 0
      P = ZERO
      ZP = ZERO
      DO 10 I = 1, 20
   10 PWRK(I) = PERC(I, N4)
      M4 = M + 4
      IFAIL = 0
      CALL E01BAF(M, PWRK, PERZ, KNOT, COEF, M4, WRK, LWRK, IFAIL)
      IF (IFAIL .GT. 0) IFAULT = IFAIL + 5
      IF (IFAULT .GT. 0) RETURN
      IFAIL = 0
      CALL E02BBF(M4, KNOT, COEF, B2, ZP, IFAIL)
      IF (IFAIL .GT. 0) IFAULT = IFAIL + 5
      IF (IFAULT .GT. 0) RETURN
      P = ALNORM(ZP, LOWER)
      RETURN
C
C        N GT 14
C
   20 AN = FLOAT(N)
      X = ALOG(AN / HUNDRD)
C
C        SMOOTHED VALUE FOR LOCATION PARAMETER (XI).
C
      DENOM = ONE
      ARG = -0.02687 * (AN - HUNDRD)
      IF (ARG .GE. ENEG) DENOM = ONE + EXP(ARG)
      XI = 0.8 + 2.2 / DENOM
C
      IF (N .GE. HUNDRD) GOTO 30
C
C        FIND LAMDA AND A FOR N LT 100
C
      LAMDA = 0.17162 * EXP(AN * 0.02253)
      A = 0.3155 - 1.1555 * X * (1.0 + X * (0.6143 + 0.3423 * X))
C
C        ASSIGN KNOTS FOR INTERPOLATING SPLINE
C
      DO 25 I = 1, MSMALL
   25 KNOT(I) = ALOG(FLOAT(N1(I)) / HUNDRD)
C
C        GET THETA AND ETA USING B-SPLINE INTERPOLATION FUNCTIONS
C
      IFAIL = 0
      CALL E02BBF(MSMALL, KNOT, CSL1, X, THETA, IFAIL)
      IF (IFAIL .NE. 0) IFAULT = IFAIL + 5
      IF (IFAULT .GT. 0) RETURN
      IFAIL = 0
      CALL E02BBF(MSMALL, KNOT, CI1, X, ETA, IFAIL)
      IF (IFAIL .NE. 0) IFAULT = IFAIL + 5
      IF (IFAULT .GT. 0) RETURN
      GOTO 60
C
C        FIND LAMDA AND A FOR N GE 100
C
   30 LAMDA = EXP( - 0.06174 + 0.711 / (1.0 + EXP(2.0581 * (X - 0.6374))
     *  ) )
      A = 0.3155 - 0.31287 * (EXP(-2.295 * X) - ONE)
      IF (N .GT. I5000) GOTO 60
C
C        ASSIGN KNOTS FOR INTERPOLATING SPLINE
C
      DO 40 I = 1, MBIG
   40 KNOT(I) = ALOG(FLOAT(N2(I)) / HUNDRD)
C
C        GET THETA AND ETA USING B-SPLINE INTERPOLATION FUNCTIONS
C
      IFAIL = 0
      CALL E02BBF(MBIG, KNOT, CSL2, X, THETA, IFAIL)
      IF (IFAIL .NE. 0) IFAULT = IFAIL + 5
      IF (IFAULT .GT. 0) RETURN
      IFAIL = 0
      CALL E02BBF(MBIG, KNOT, CI2, X, ETA, IFAIL)
      IF (IFAIL .NE. 0) IFAULT = IFAIL + 5
      IF (IFAULT .GT. 0) RETURN
C
C        A IS SHAPE, XI IS LOCATION, LAMDA IS SCALE
C
   60 Y = (B2 - XI) / LAMDA
      H = A + Y + SQRT(ONE + Y * Y)
      IF (H .GT. ONE) GOTO 65
C
C        B2 BELOW LIMIT OF MODIFIED JOHNSON CURVE (I.E. ILLEGAL).
C
   61 IFAULT = 7
      RETURN
   65 IF (N .LE. I5000) GOTO 70
C
C        GET EXPECTED VALUE (ETA) AND SD (THETA) OF TRANSFORMED B2 (=H).
C        (USES LOW ORDER APPROX EVALUATED AT EXPECTED VALUE OF B2)
C
      YE = (EB2(AN) - XI) / LAMDA
      HE = A + YE + SQRT(ONE + YE * YE)
      IF (HE .LE. ONE) GOTO 61
      ETA = ALOG(ALOG(HE))
      THETA = SQRT(VB2(AN)) * ABS((HE - A) / (LAMDA * HE * ALOG(HE)
     *  * (HE - A - YE)) )
   70 ZP = (ALOG(ALOG(H)) - ETA) / THETA
      P = ALNORM(ZP, LOWER)
      RETURN
      END
C
      SUBROUTINE PSKEW(B1, N, P, ZP, IFAULT)
C
C        ALGORITHM AS209.1  APPL. STATIST. (1985) VOL. 34, NO. 1
C
C        EVALUATES P VALUE FOR COEFFICIENT OF SKEWNESS (SQRT(BETA.1))
C        IN NORMAL SAMPLES. ASSUMES A SU APPROXIMATION AS WORKED OUT BY
C        D'AGOSTINO,
C        BIOMETRIKA, 1970, 57,679-681.
C        N = SAMPLE SIZE, ZP = NORMAL EQUIVALENT DEVIATE FOR B1,  P = P
C        VALUE
C
C        IFAULT = 0, SUCCESS
C        1, N LT 10
C
      LOGICAL LOWER
      REAL NINE
      DATA ZERO /0.0E0/, ONE /1.0E0/, TWO /2.0E0/, THREE /3.0E0/, FIVE /
     *  5.0E0/
      DATA SIX /6.0E0/, SEVEN /7.0E0/, NINE /9.0E0/, TWENT7 /27.0E0/
      DATA SEVNTY /70.0E0/, LOWER /.FALSE./
      ZP = ZERO
      P = ZERO
      IFAULT = 1
      IF (N .LT. 10) RETURN
      IFAULT = 0
      AN = N
      AN1 = AN + ONE
      AN3 = AN + THREE
      ANM2 = AN - TWO
      Y = B1 * SQRT(AN1 * AN3 / (SIX * ANM2) )
      BETA2 = THREE * (AN * AN + TWENT7 * AN - SEVNTY) * AN1 * AN3 /
     *  (ANM2 * (AN + FIVE) * (AN + SEVEN) * (AN + NINE) )
      W2 = SQRT(TWO * BETA2 - TWO) - ONE
      DELTA = ONE / SQRT(ALOG(W2) / TWO)
      ALPHA = SQRT(TWO / (W2 - ONE))
      Y1 = Y / ALPHA
      ZP = DELTA * ALOG(Y1 + SQRT(ONE + Y1 * Y1))
      P = ALNORM(ZP, LOWER)
      RETURN
      END
      REAL FUNCTION ALNORM(Z, UPPER)
      LOGICAL UPPER
      IF (UPPER) CALL STAT8(Z, ALNORM, DUMMY)
      IF (.NOT.UPPER) CALL STAT8(Z, DUMMY, ALNORM)
      RETURN
      END
